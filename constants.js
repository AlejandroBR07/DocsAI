import { Team } from './types.js';

export const DOCUMENT_STRUCTURES = {
  [Team.Developers]: `
# üìù Documenta√ß√£o T√©cnica: NOME_DO_PROJETO

## 1. Vis√£o Geral
### 1.1. O Problema
[Descreva em detalhes o problema de neg√≥cio ou t√©cnico que este projeto resolve. Qual era a dor ou a necessidade antes desta solu√ß√£o?]

### 1.2. A Solu√ß√£o
[Apresente um resumo de alto n√≠vel de como o projeto atende √† necessidade descrita. Qual √© o principal valor que ele entrega?]

## 2. Arquitetura da Solu√ß√£o
[Detalhe a arquitetura (ex: Microsservi√ßos, Serverless, Monolito). Use texto ou links para diagramas. Mencione os principais padr√µes de design aplicados e justifique as escolhas tecnol√≥gicas.]

- **Tecnologias Principais:** [Frameworks, Linguagens, etc.]
- **Plataforma de Cloud:** [AWS, GCP, Azure, etc.]
- **Padr√µes de Arquitetura:** [Event-Driven, MVC, etc.]

## 3. Configura√ß√£o do Ambiente de Desenvolvimento
### 3.1. Pr√©-requisitos
[Liste todo o software necess√°rio para rodar o projeto localmente (ex: Node.js v18+, Docker, Python v3.10+).]

### 3.2. Instala√ß√£o
[Forne√ßa um guia passo a passo para instalar as depend√™ncias.]
\`\`\`bash
# Exemplo
npm install
\`\`\`

### 3.3. Vari√°veis de Ambiente
[Liste todas as vari√°veis de ambiente necess√°rias. Use um arquivo \`.env.example\` como modelo.]
- \`DATABASE_URL\`: String de conex√£o com o banco de dados.
- \`API_KEY_SECRET\`: Chave para um servi√ßo externo.

## 4. API (se aplic√°vel)
[Liste e descreva os principais endpoints da API.]

### Endpoint: \`POST /api/exemplo\`
- **Descri√ß√£o:** [O que este endpoint faz?]
- **Autentica√ß√£o:** [Obrigat√≥ria (Bearer Token), Opcional, Nenhuma]
- **Body (Request):**
\`\`\`json
{
  "exemploChave": "exemploValor"
}
\`\`\`
- **Resposta (200 OK):**
\`\`\`json
{
  "id": "uuid",
  "status": "sucesso"
}
\`\`\`

## 5. Estrutura do Banco de Dados
[Descreva o esquema do banco de dados, as tabelas principais e seus relacionamentos. Pode ser um script SQL, um diagrama ou uma descri√ß√£o textual.]

## 6. Processo de Deploy
[Explique como o deploy √© feito (ex: CI/CD com GitHub Actions, deploy manual). Inclua os comandos ou passos necess√°rios.]

## 7. Observa√ß√µes T√©cnicas Adicionais
[Qualquer outra informa√ß√£o relevante: estrat√©gias de cache, tratamento de erros, bibliotecas importantes, etc.]
`,
  [Team.UXUI]: `
# üé® Documenta√ß√£o de UX/UI: NOME_DO_PROJETO

## 1. Contexto e Objetivos
### 1.1. O Desafio do Usu√°rio
[Qual √© o problema ou necessidade fundamental do usu√°rio que esta interface busca resolver? Descreva o cen√°rio do usu√°rio.]

### 1.2. Objetivos de Neg√≥cio e de Usabilidade
[Liste os principais objetivos de neg√≥cio (ex: aumentar a convers√£o em 10%) e de usabilidade (ex: reduzir o tempo para completar a tarefa X).]

## 2. Pesquisa e Personas
[Resuma os principais insights da pesquisa com usu√°rios. Apresente as personas prim√°rias e secund√°rias para as quais o projeto foi desenhado.]

## 3. Arquitetura da Informa√ß√£o e Fluxos
[Descreva a organiza√ß√£o do conte√∫do e a estrutura de navega√ß√£o. Insira links para diagramas de fluxo de usu√°rio, sitemaps ou wireflows.]

- **Link do Fluxo no Miro/Figma:** [URL]

## 4. Wireframes e Prot√≥tipos
[Forne√ßa links para os wireframes (baixa fidelidade) e o prot√≥tipo interativo final (alta fidelidade).]

- **Wireframes (Lo-Fi):** [URL]
- **Prot√≥tipo Interativo (Hi-Fi):** [URL]

## 5. Design System e Componentes Visuais
### 5.1. Paleta de Cores
[Apresente a paleta de cores, incluindo prim√°rias, secund√°rias, de feedback (sucesso, erro, aviso) e neutras.]

- **Prim√°ria:** #HEXCODE
- **Sucesso:** #HEXCODE

### 5.2. Tipografia
[Detalhe a fam√≠lia tipogr√°fica, pesos e a escala tipogr√°fica utilizada (tamanhos para H1, H2, Body, etc.).]

- **Fonte Principal:** [Nome da Fonte]
- **Base Size:** 16px

### 5.3. Componentes Chave
[Descreva e mostre exemplos dos componentes mais importantes (ex: bot√µes, cards, formul√°rios), incluindo seus diferentes estados (default, hover, disabled).]

## 6. Diretrizes de Acessibilidade (WCAG)
[Liste as principais diretrizes de acessibilidade consideradas no projeto (ex: contraste de cores, navega√ß√£o por teclado, texto alternativo para imagens).]

## 7. Anima√ß√µes e Microintera√ß√µes
[Descreva as principais anima√ß√µes que guiam a experi√™ncia, como transi√ß√µes de p√°gina ou feedback de a√ß√µes do usu√°rio.]
`,
  [Team.Automations]: `
# ‚öôÔ∏è Documenta√ß√£o de Automa√ß√£o: NOME_DO_PROJETO

## 1. Prop√≥sito da Automa√ß√£o
[Descreva o processo de neg√≥cio que est√° sendo automatizado. Qual era o processo manual antes? Qual o ganho esperado com a automa√ß√£o (economia de tempo, redu√ß√£o de erros)?]

## 2. Vis√£o Geral do Fluxo
[Apresente um resumo de alto n√≠vel do que a automa√ß√£o faz, desde o gatilho inicial at√© o resultado final. Se poss√≠vel, inclua um link para um diagrama do fluxo.]

- **Plataforma:** [N8N, Zapier, Make, etc.]
- **Link do Workflow:** [URL do workflow, se aplic√°vel]

## 3. Gatilhos (Triggers)
[Detalhe o que inicia a automa√ß√£o.]
- **Tipo de Gatilho:** [Webhook, Agendado (Schedule), Manual]
- **Frequ√™ncia (se agendado):** [Ex: A cada 15 minutos, toda segunda-feira √†s 9h]
- **Payload do Webhook (se aplic√°vel):** [Mostre um exemplo do JSON esperado]

## 4. Detalhamento dos Passos (N√≥s)
[Liste e descreva os n√≥s ou passos mais cr√≠ticos da automa√ß√£o.]

- **N√≥ 1: [Nome do N√≥]**
  - **Fun√ß√£o:** [O que ele faz?]
  - **Sistemas Envolvidos:** [API do Sistema X, Banco de Dados Y]
- **N√≥ 2: [Nome do N√≥]**
  - **Fun√ß√£o:** [O que ele faz?]
  - **L√≥gica Condicional:** [Descreva qualquer l√≥gica "if/else" importante aqui.]

## 5. Sistemas Integrados e Credenciais
[Liste todas as APIs e sistemas de terceiros utilizados. Explique como as credenciais s√£o gerenciadas (ex: Credenciais do N8N, Vari√°veis de Ambiente).]

## 6. Tratamento de Erros e Notifica√ß√µes
[Descreva o que acontece quando ocorre um erro. Existe um fluxo de tratamento de erros? Algu√©m √© notificado?]

## 7. Vari√°veis de Ambiente e Inputs
[Liste as vari√°veis de ambiente ou inputs necess√°rios para a automa√ß√£o funcionar.]
- \`API_KEY_SISTEMA_X\`: [Descri√ß√£o da chave]
- \`USER_ID_DEFAULT\`: [Descri√ß√£o da vari√°vel]

## 8. Monitoramento e Logs
[Explique como monitorar a execu√ß√£o da automa√ß√£o e onde encontrar os logs para depura√ß√£o.]
`,
  [Team.AI]: `
# ü§ñ Documenta√ß√£o de IA / Agente: NOME_DO_PROJETO

## 1. Objetivo do Agente
[Descreva a principal fun√ß√£o do modelo ou agente de IA. Que tarefa ele executa? Qual problema ele resolve para o usu√°rio ou para o neg√≥cio?]

## 2. Arquitetura e Modelo
### 2.1. Modelo de Linguagem (LLM)
[Especifique o modelo base utilizado.]
- **Modelo:** [Gemini 1.5 Flash, GPT-4o, etc.]
- **Provedor:** [Google, OpenAI, etc.]

### 2.2. Instru√ß√£o de Sistema (System Prompt)
[Apresente o prompt de sistema completo que define a persona, o objetivo e as restri√ß√µes do agente.]
\`\`\`
[Cole o prompt base aqui]
\`\`\`

## 3. Ferramentas (Tools / Functions)
[Liste e descreva todas as ferramentas ou fun√ß√µes que o agente pode invocar para interagir com sistemas externos.]

### Ferramenta: \`nomeDaFuncao\`
- **Descri√ß√£o:** [O que a fun√ß√£o faz, na perspectiva do modelo.]
- **Par√¢metros:**
  - \`param1\`: [Tipo de dado] - [Descri√ß√£o do par√¢metro]
  - \`param2\`: [Tipo de dado] - [Descri√ß√£o do par√¢metro]
- **Retorno:** [O que a fun√ß√£o retorna para o modelo.]

## 4. Fluxo de Execu√ß√£o e L√≥gica
[Descreva a l√≥gica principal do agente. Como ele decide qual ferramenta usar? Existe algum fluxo de conversa pr√©-definido ou ele √© totalmente reativo?]

## 5. Estrutura de Resposta
[Detalhe o formato esperado da resposta final da IA, especialmente se for uma estrutura espec√≠fica como JSON. Forne√ßa um exemplo claro.]

### Exemplo de Resposta (JSON):
\`\`\`json
{
  "key": "value",
  "analysis": {
    "sentiment": "positive"
  }
}
\`\`\`

## 6. Estrat√©gias de Valida√ß√£o e Guardrails
[Descreva como a qualidade e a seguran√ßa das respostas s√£o garantidas. Existem passos de valida√ß√£o? Como o agente lida com t√≥picos fora de escopo ou perigosos?]

## 7. Observa√ß√µes e Limita√ß√µes
[Inclua informa√ß√µes sobre limita√ß√µes conhecidas, considera√ß√µes de custo, lat√™ncia ou estrat√©gias de fallback caso a IA falhe.]
`,
};
