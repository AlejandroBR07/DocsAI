import { GoogleGenAI } from "@google/genai";
import { Team } from "../types.js";

let ai = null;

export const initializeGemini = (apiKey) => {
  if (!apiKey) {
    console.error("A chave de API √© necess√°ria para inicializar o Gemini.");
    return false;
  }
  // A inicializa√ß√£o acontece aqui, usando a chave fornecida pelo usu√°rio.
  ai = new GoogleGenAI({ apiKey });
  return true;
};


const markdownToHtml = (text) => {
    let htmlContent = text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#039;');

    // Headings (process from most specific to least specific)
    htmlContent = htmlContent
      .replace(/^###### (.*$)/gm, '<h6>$1</h6>')
      .replace(/^##### (.*$)/gm, '<h5>$1</h5>')
      .replace(/^#### (.*$)/gm, '<h4>$1</h4>')
      .replace(/^### (.*$)/gm, '<h3>$1</h3>')
      .replace(/^## (.*$)/gm, '<h2>$1</h2>')
      .replace(/^# (.*$)/gm, '<h1>$1</h1>');

    // Inline elements
    htmlContent = htmlContent
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/`([^`]+)`/g, '<code>$1</code>');

    // Lists (unordered and ordered)
    // Process unordered lists
    htmlContent = htmlContent.replace(/^\s*[-*] (.*$)/gm, '<li>$1</li>');
    htmlContent = htmlContent.replace(/((<li>.*<\/li>\s*)+)/g, '<ul>\n$1</ul>\n');
     htmlContent = htmlContent.replace(/<\/ul>\s*<ul>/g, '');


    // Process ordered lists
    htmlContent = htmlContent.replace(/^\s*\d+\. (.*$)/gm, '<li>$1</li>');
    htmlContent = htmlContent.replace(/((<li>.*<\/li>\s*)+)/g, (match) => {
        // Avoid re-wrapping if it's already in a <ul>
        if (match.includes('<ul>')) return match;
        return '<ol>\n' + match + '</ol>\n';
    });
    htmlContent = htmlContent.replace(/<\/ol>\s*<ol>/g, '');
    htmlContent = htmlContent.replace(/<\/ul>\s*<ol>/g, '</ul>\n<ol>');


    // Newlines
    htmlContent = htmlContent.replace(/\n/g, '<br />');

    // Cleanup: remove <br> around block elements
    const blockElements = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ul', 'ol', 'pre', 'li', 'div'];
    blockElements.forEach(tag => {
        const reBefore = new RegExp(`<br \\/>(\\s*<${tag}[^>]*>)`, 'g');
        const reAfter = new RegExp(`(</${tag}>\\s*)<br \\/>`, 'g');
        htmlContent = htmlContent.replace(reBefore, '$1');
        htmlContent = htmlContent.replace(reAfter, '$1');
    });
     htmlContent = htmlContent.replace(/<\/li><br \/>/g, '</li>');


    return htmlContent;
}

export const generateDocumentContent = async (params) => {
  if (!ai) {
    throw new Error("A API Gemini n√£o foi inicializada. Por favor, configure sua chave de API na tela inicial.");
  }

  const { projectName, description, team, includeSupportSection, teamData } = params;
  try {
    
    let persona = 'Voc√™ √© um assistente de IA especialista em criar documenta√ß√£o t√©cnica e de neg√≥cios.';
    switch (team) {
      case Team.Developers:
        persona = 'Aja como um engenheiro de software s√™nior e arquiteto de solu√ß√µes.';
        break;
      case Team.UXUI:
         persona = 'Aja como um especialista em UX/UI e Product Designer, com foco em clareza para a equipe de desenvolvimento.';
        break;
      case Team.Automations:
        persona = 'Aja como um especialista em automa√ß√£o de processos (RPA e integra√ß√µes).';
        break;
      case Team.AI:
        persona = 'Aja como um engenheiro de IA especialista em arquitetura de agentes e large language models.';
        break;
    }

    let teamContext = '';
    
    // Handle context for developers from multiple sources
    if (team === Team.Developers) {
        if (teamData.folderFiles && teamData.folderFiles.length > 0) {
          let folderContent = '**Estrutura e Conte√∫do do Projeto (Pasta):**\n\n';
          for (const file of teamData.folderFiles) {
            folderContent += `--- Arquivo: ${file.path} ---\n${file.content}\n\n`;
          }
          teamContext += folderContent;
        }

        if (teamData.uploadedCodeFiles && teamData.uploadedCodeFiles.length > 0) {
          let filesContent = '**Arquivos Avulsos Anexados:**\n\n';
          for (const file of teamData.uploadedCodeFiles) {
            filesContent += `--- Arquivo: ${file.name} ---\n${file.content}\n\n`;
          }
          teamContext += filesContent;
        }
        
        if (teamData.pastedCode) {
            teamContext += `**C√≥digo Colado Adicional:**\n${teamData.pastedCode}\n\n`;
        }
    }


    teamContext += teamData.databaseSchema ? `**Esquema do Banco de Dados:**\n${teamData.databaseSchema}\n` : '';
    teamContext += teamData.dependencies ? `**Depend√™ncias e Bibliotecas:**\n${teamData.dependencies}\n` : '';
    teamContext += (teamData.images && teamData.images.length > 0) ? 'Analise as imagens de interface fornecidas para descrever os componentes, fluxos e design system.\n' : '';
    teamContext += teamData.personas ? `**Personas:**\n${teamData.personas}\n` : '';
    teamContext += teamData.userFlows ? `**Fluxos de Usu√°rio (descri√ß√£o textual):**\n${teamData.userFlows}\n` : '';
    teamContext += teamData.json ? `**Estrutura da Automa√ß√£o (JSON - ex: N8N):**\n${teamData.json}\nInterprete a estrutura JSON acima para detalhar os n√≥s e a l√≥gica.\n` : '';
    teamContext += teamData.triggerInfo ? `**Informa√ß√µes do Gatilho (Trigger):**\n${teamData.triggerInfo}\n` : '';
    teamContext += teamData.externalApis ? `**APIs Externas Envolvidas:**\n${teamData.externalApis}\n` : '';
    teamContext += teamData.systemPrompt ? `**System Prompt:**\n${teamData.systemPrompt}\n` : '';
    teamContext += teamData.workflow ? `**Fluxo de Trabalho/Conversa:**\n${teamData.workflow}\n` : '';
    teamContext += teamData.tools ? `**Ferramentas (Tools):**\n${teamData.tools}\n` : '';
    teamContext += teamData.exampleIO ? `**Exemplos de Entrada/Sa√≠da:**\n${teamData.exampleIO}\n` : '';
    teamContext += teamData.guardrails ? `**Guardrails e Regras de Seguran√ßa:**\n${teamData.guardrails}\n` : '';
    

    const mainPrompt = `
      ${persona}
      Sua tarefa √© atuar como um escritor t√©cnico especialista e criar uma documenta√ß√£o abrangente e bem-estruturada para o projeto a seguir.

      **Instru√ß√µes Chave:**
      1.  **An√°lise Hol√≠stica:** Voc√™ recebeu um contexto de c√≥digo de m√∫ltiplas fontes (pastas de projeto, arquivos avulsos, c√≥digo colado). Analise TODAS as fontes e suas rela√ß√µes para entender o projeto de forma completa antes de escrever.
      2.  **Estrutura Din√¢mica:** N√ÉO use um template fixo. Com base na sua an√°lise hol√≠stica do c√≥digo, gere as se√ß√µes e t√≥picos mais l√≥gicos e √∫teis para ESTE projeto espec√≠fico. Se o usu√°rio fornecer um texto com placeholders como "[Descreva aqui]", sua tarefa √© PREENCHER esses placeholders com conte√∫do detalhado e relevante, usando o resto do contexto.
      3.  **Estilo Profissional:** A documenta√ß√£o deve ser clara, pr√°tica e bem-organizada. Use uma estrutura hier√°rquica e numerada quando fizer sentido (ex: 1.0, 2.1, 2.1.1).
      4.  **Conte√∫do Essencial:** Comece com a motiva√ß√£o ou o objetivo do projeto. Em seguida, detalhe o fluxo de funcionamento, a arquitetura e os componentes t√©cnicos ou de processo mais importantes. Preencha todo o conte√∫do de forma detalhada e profissional. O resultado final n√£o deve conter placeholders.
      5.  **Profundidade e Completude:** Sua meta √© criar um documento t√£o completo que um novo membro da equipe possa entender o projeto de ponta a ponta sem precisar perguntar a ningu√©m. N√£o deixe lacunas. Se uma parte do contexto n√£o for clara, use seu conhecimento como especialista para fazer suposi√ß√µes informadas e preencher os detalhes com as melhores pr√°ticas da ind√∫stria.
      6.  **Formata√ß√£o Markdown R√çGIDA (Estilo Google Docs):**
          - **PROIBIDO:** NUNCA, sob nenhuma circunst√¢ncia, use blocos de c√≥digo com tr√™s crases (\`\`\`). A sa√≠da N√ÉO DEVE conter \`\`\`.
          - **CORRETO:** Para c√≥digo em linha (nomes de vari√°veis, fun√ß√µes, arquivos), use crases SIMPLES (\`). Exemplo: \`minhaFuncao()\`.
          - **PROIBIDO:** N√£o gere crases vazias ou com apenas espa√ßos, como \` \` ou \`\`.
          - **CORRETO:** Para blocos de c√≥digo com v√°rias linhas, insira-os como texto simples, preservando a indenta√ß√£o e as quebras de linha, sem usar crases.
          - Use negrito (\*\*) para √™nfase e t√≠tulos de se√ß√£o.
      7.  **Padr√£o Google Docs:** A formata√ß√£o final deve ser 100% compat√≠vel com o estilo e a estrutura de um documento profissional do Google Docs. Pense em como o conte√∫do ficaria ao ser colado diretamente no Google Docs: t√≠tulos claros (usando #, ##, etc.), listas com marcadores ou n√∫meros, e uso de negrito para destaque.

      **Informa√ß√µes do Projeto:**
      - Nome do Projeto: ${projectName}
      - Descri√ß√£o/Objetivo Principal: ${description}
      - Equipe Alvo da Documenta√ß√£o: ${team}

      **Contexto Adicional Fornecido para sua An√°lise:**
      ${teamContext || "Nenhum contexto adicional foi fornecido. Crie a estrutura e o conte√∫do com base nas melhores pr√°ticas para um projeto com a descri√ß√£o fornecida."}
    `;

    let supportInstruction = '';
    if (includeSupportSection) {
      supportInstruction = `
---
## üìñ Guia Completo do Usu√°rio (Help Center)

**Instru√ß√£o Adicional OBRIGAT√ìRIA:** Ap√≥s a documenta√ß√£o t√©cnica, sua tarefa mais importante √© criar um guia de usu√°rio final EXTREMAMENTE COMPLETO e abrangente. Este n√£o √© apenas um anexo, mas um manual detalhado para um usu√°rio que n√£o tem NENHUM conhecimento t√©cnico. A linguagem deve ser a mais simples e acess√≠vel poss√≠vel. Analise TODO o contexto fornecido (descri√ß√£o, c√≥digo, imagens, fluxos) para identificar TODAS as funcionalidades e intera√ß√µes poss√≠veis do ponto de vista do usu√°rio.

**Estrutura Obrigat√≥ria para o Guia do Usu√°rio:**

### 1. Bem-vindo ao ${projectName}!
- **O que √© isso?** Comece com uma explica√ß√£o muito simples e amig√°vel sobre o que √© a funcionalidade/projeto e qual problema ela resolve para o usu√°rio no dia a dia. Use analogias se ajudar.
- **Para quem √© isso?** Descreva o perfil de usu√°rio que mais se beneficiar√° com isso.

### 2. Primeiros Passos (Guia R√°pido)
- Forne√ßa um guia de in√≠cio r√°pido com 3 a 5 passos essenciais para que o usu√°rio possa obter valor imediato. Ex: "1. Crie sua conta; 2. Configure seu perfil; 3. Crie seu primeiro projeto...".

### 3. Tutoriais Detalhados (Passo a Passo)
- **INSTRU√á√ÉO CR√çTICA:** Analise o contexto e INFERIR as principais tarefas que um usu√°rio pode realizar. Crie um tutorial passo a passo separado para CADA TAREFA.
- **Exemplos de tarefas a serem inferidas:** Se o contexto √© sobre um sistema de e-commerce, crie tutoriais para "Como buscar um produto", "Como adicionar um item ao carrinho", "Como finalizar uma compra". Se for sobre uma ferramenta de design, "Como criar um novo arquivo", "Como usar a ferramenta de texto", "Como exportar seu trabalho". Se for uma landing page de cursos como o usu√°rio mencionou, crie um tutorial para "Como se inscrever em um novo curso".
- Cada tutorial deve ser ultra-detalhado, com uma lista numerada, verbos de a√ß√£o claros (Ex: "Clique no bot√£o 'Salvar'", "Arraste o item para a coluna 'Conclu√≠do'") e, se poss√≠vel, descreva o que o usu√°rio deve ver na tela.

### 4. Solu√ß√£o de Problemas e Perguntas Frequentes (FAQ)
- Crie uma se√ß√£o robusta com pelo menos 5 a 8 problemas comuns ou perguntas frequentes.
- Para cada item, use o seguinte formato:
    - **ü§î Pergunta/Problema:** [Descreva a d√∫vida ou o erro em linguagem de usu√°rio. Ex: "O bot√£o de salvar n√£o funciona." ou "Onde encontro meus arquivos?"]
    - **üí° Solu√ß√£o/Resposta:** [Forne√ßa uma explica√ß√£o clara e uma s√©rie de passos simples para resolver o problema. Ex: "Isso geralmente acontece porque o campo 'Nome' n√£o foi preenchido. Verifique se todos os campos obrigat√≥rios (marcados com *) est√£o completos e tente salvar novamente."].

Este guia deve ser t√£o completo que elimina a necessidade de o usu√°rio entrar em contato com o suporte para tarefas rotineiras.
`;
    }

    const fullPrompt = `
      ${mainPrompt}
      ${supportInstruction}
      
      **Sua Resposta (gere apenas o markdown completo e preenchido, come√ßando com o t√≠tulo principal como '# Nome do Projeto'):**
    `;

    let contents;

    if (team === Team.UXUI && teamData.images && teamData.images.length > 0) {
        const imageParts = teamData.images.map(img => ({
            inlineData: {
                mimeType: img.mimeType,
                data: img.data,
            }
        }));
        contents = { parts: [{ text: fullPrompt }, ...imageParts] };
    } else {
        contents = fullPrompt;
    }
    
    const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents,
    });
    let text = response.text;

    if (!text) {
      throw new Error("A resposta da IA estava vazia.");
    }
    
    // BUG FIX: Clean up common AI formatting errors before converting to HTML
    // 1. Remove any triple (or more) backticks, as they are disallowed.
    text = text.replace(/`{3,}/g, '');
    // 2. Remove empty or whitespace-only inline code blocks.
    text = text.replace(/`\s*`/g, '');

    // Remove component-like placeholders that the AI might generate
    text = text.replace(/<([A-Z][a-zA-Z0-9]+)\s*\/>/g, '');

    // Separate title from content
    const lines = text.trim().split('\n');
    let title = projectName;
    let contentMarkdown = text.trim();

    if (lines[0].startsWith('# ')) {
        const extractedTitle = lines[0].substring(2).trim();
        // Check if the extracted title contains the team name, e.g., "Documenta√ß√£o T√©cnica: My Project"
        const titleParts = extractedTitle.split(':');
        title = titleParts.length > 1 ? titleParts[1].trim() : extractedTitle;
        contentMarkdown = lines.slice(1).join('\n');
    }

    const htmlContent = markdownToHtml(contentMarkdown);
    return { title, content: htmlContent };

  } catch (error) {
    console.error("Erro ao gerar conte√∫do com a API Gemini:", error);
    let userMessage = "Ocorreu uma falha inesperada ao tentar gerar o documento. Por favor, tente novamente mais tarde.";

    if (error instanceof Error) {
        if (error.message.includes('API key not valid')) {
            userMessage = "Sua chave de API do Gemini √© inv√°lida. Por favor, verifique-a na tela de configura√ß√£o.";
        } else if (error.message.includes('SAFETY')) {
            userMessage = "A gera√ß√£o de conte√∫do foi bloqueada pelas pol√≠ticas de seguran√ßa da IA. Tente ajustar o conte√∫do fornecido (textos, imagens, etc.) e tente novamente.";
        } else {
            userMessage = `Erro da IA: ${error.message}`;
        }
    }
    
    throw new Error(userMessage);
  }
};